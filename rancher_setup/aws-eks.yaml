AWSTemplateFormatVersion: '2010-09-09'
Description: EKS cluster with IPv6 VPC, i4i.xlarge instances, standard support, mixed instance policy, 600 pods per node, and Longhorn S3 backup bucket

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  VPCCidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      AmazonProvidedIpv6CidrBlock: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.0.0/18
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Ipv6CidrBlock: 
        Fn::Select: 
          - 0
          - Fn::Cidr: 
            - Fn::Select: 
              - 0
              - Fn::GetAtt: 
                - VPC
                - Ipv6CidrBlocks
            - 3
            - 64

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.0.64.0/18
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Ipv6CidrBlock: 
        Fn::Select: 
          - 1
          - Fn::Cidr: 
            - Fn::Select: 
              - 0
              - Fn::GetAtt: 
                - VPC
                - Ipv6CidrBlocks
            - 3
            - 64

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Ipv6CidrBlock: 
        Fn::Select: 
          - 2
          - Fn::Cidr: 
            - Fn::Select: 
              - 0
              - Fn::GetAtt: 
                - VPC
                - Ipv6CidrBlocks
            - 3
            - 64

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteIPv6:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub ${AWS::StackName}
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds: 
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PublicSubnet3
      KubernetesNetworkConfig:
        IpFamily: ipv6
      UpgradePolicy:
        SupportType: STANDARD

  EKSNodeGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Policies:
        - PolicyName: AmazonEKS_CNI_IPv6_Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AssignIpv6Addresses
                  - ec2:DescribeInstances
                  - ec2:DescribeTags
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeInstanceTypes
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                Resource:
                  - arn:aws:ec2:*:*:network-interface/*

  NodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: i4i.xlarge
        ImageId: '{{resolve:ssm:/aws/service/eks/optimized-ami/1.30/amazon-linux-2023/x86_64/standard/recommended/image_id}}'
        UserData:
          Fn::Base64:
            !Sub
              - |
                ---
                apiVersion: node.eks.aws/v1alpha1
                kind: NodeConfig
                spec:
                  cluster:
                    name: ${ClusterName}
                    apiServerEndpoint: ${ApiServerEndpoint}
                    certificateAuthority: ${CertificateAuthority}
                    cidr: ${ClusterCidr}
                  kubelet:
                    config:
                      maxPods: 600
                  instance:
                    localStorage:
                      strategy: RAID0
              - ClusterName: !Ref EKSCluster
                ApiServerEndpoint: !GetAtt EKSCluster.Endpoint
                CertificateAuthority: !GetAtt EKSCluster.CertificateAuthorityData
                ClusterCidr: !GetAtt EKSCluster.KubernetesNetworkConfig.ServiceIpv6Cidr

  SpotNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt EKSNodeGroupRole.Arn
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      ScalingConfig:
        MinSize: 1
        DesiredSize: 1
        MaxSize: 300
      CapacityType: SPOT
      LaunchTemplate:
        Id: !Ref NodeLaunchTemplate
        Version: !GetAtt NodeLaunchTemplate.LatestVersionNumber

  OnDemandNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt EKSNodeGroupRole.Arn
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      ScalingConfig:
        MinSize: 2
        DesiredSize: 2
        MaxSize: 2
      CapacityType: ON_DEMAND
      LaunchTemplate:
        Id: !Ref NodeLaunchTemplate
        Version: !GetAtt NodeLaunchTemplate.LatestVersionNumber

  LonghornBackupBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-longhorn-backups
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  LonghornBackupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LonghornBackupS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${LonghornBackupBucket}
                  - !Sub arn:aws:s3:::${LonghornBackupBucket}/*

Outputs:
  EKSCluster:
    Description: EKS Cluster
    Value: !Ref EKSCluster
  LonghornBackupRoleARN:
    Description: ARN of IAM role for Longhorn S3 backup access
    Value: !GetAtt LonghornBackupRole.Arn