AWSTemplateFormatVersion: '2010-09-09'
Description: EKS cluster with IPv6 VPC, dualstack NLB, i4i instances, standard support, mixed instance policy, 600 pods per node

Parameters:
  InstanceSize:
    Type: String
    Default: 2xlarge
    AllowedValues: [xlarge, 2xlarge, 4xlarge]
    Description: Size of the i4i instances to use for the EKS nodes

  DesiredSpotInstances:
    Type: Number
    Default: 1
    MinValue: 0
    MaxValue: 300
    Description: Desired number of spot instances in the EKS cluster

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags: [{Key: Name, Value: !Sub '${AWS::StackName}-VPC'}]

  VPCCidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties: {VpcId: !Ref VPC, AmazonProvidedIpv6CidrBlock: true}

  InternetGateway: {Type: AWS::EC2::InternetGateway}

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: {VpcId: !Ref VPC, InternetGatewayId: !Ref InternetGateway}

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.0.0/18
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Ipv6CidrBlock: !Select [0, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 3, 64]]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.0.64.0/18
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Ipv6CidrBlock: !Select [1, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 3, 64]]

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Ipv6CidrBlock: !Select [2, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 3, 64]]

  PublicRouteTable: {Type: AWS::EC2::RouteTable, Properties: {VpcId: !Ref VPC}}

  PublicRoute:
    Type: AWS::EC2::Route
    Properties: {RouteTableId: !Ref PublicRouteTable, DestinationCidrBlock: 0.0.0.0/0, GatewayId: !Ref InternetGateway}

  PublicRouteIPv6:
    Type: AWS::EC2::Route
    Properties: {RouteTableId: !Ref PublicRouteTable, DestinationIpv6CidrBlock: '::/0', GatewayId: !Ref InternetGateway}

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: {SubnetId: !Ref PublicSubnet1, RouteTableId: !Ref PublicRouteTable}

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: {SubnetId: !Ref PublicSubnet2, RouteTableId: !Ref PublicRouteTable}

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: {SubnetId: !Ref PublicSubnet3, RouteTableId: !Ref PublicRouteTable}

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement: [{Effect: Allow, Principal: {Service: eks.amazonaws.com}, Action: sts:AssumeRole}]
      ManagedPolicyArns: [arn:aws:iam::aws:policy/AmazonEKSClusterPolicy]

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub ${AWS::StackName}
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig: {SubnetIds: [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]}
      KubernetesNetworkConfig: {IpFamily: ipv6}
      UpgradePolicy: {SupportType: STANDARD}

  EKSNodeGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement: [{Effect: Allow, Principal: {Service: ec2.amazonaws.com}, Action: sts:AssumeRole}]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Policies:
        - PolicyName: AmazonEKS_CNI_IPv6_Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: [ec2:AssignIpv6Addresses, ec2:DescribeInstances, ec2:DescribeTags, ec2:DescribeNetworkInterfaces, ec2:DescribeInstanceTypes]
                Resource: "*"
              - Effect: Allow
                Action: [ec2:CreateTags]
                Resource: [arn:aws:ec2:*:*:network-interface/*]

  NodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        NetworkInterfaces: [{Ipv6AddressCount: 1, PrimaryIpv6: true}]
        MetadataOptions: {HttpTokens: Required, HttpPutResponseHopLimit: 2, HttpProtocolIpv6: enabled}
        UserData:
          Fn::Base64: !Sub
            - |
              ---
              apiVersion: node.eks.aws/v1alpha1
              kind: NodeConfig
              spec:
                cluster:
                  name: ${ClusterName}
                  apiServerEndpoint: ${ApiServerEndpoint}
                  certificateAuthority: ${CertificateAuthority}
                  cidr: ${ClusterCidr}
                kubelet:
                  config:
                    maxPods: 600
                instance:
                  localStorage:
                    strategy: RAID0
            - ClusterName: !Ref EKSCluster
              ApiServerEndpoint: !GetAtt EKSCluster.Endpoint
              CertificateAuthority: !GetAtt EKSCluster.CertificateAuthorityData
              ClusterCidr: !GetAtt EKSCluster.KubernetesNetworkConfig.ServiceIpv6Cidr

  SSMInstallDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: 'Install packages'
        mainSteps:
        - action: aws:runShellScript
          name: installIscsi
          inputs:
            runCommand: ['dnf update -y; dnf install -y iscsi-initiator-utils']

  SSMAssociation:
    Type: AWS::SSM::Association
    Properties:
      Name: !Ref SSMInstallDocument
      Targets: [{Key: tag:aws:eks:cluster-name, Values: [!Ref EKSCluster]}]

  SpotNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      AmiType: AL2023_x86_64_STANDARD
      InstanceTypes: [!Sub 'i4i.${InstanceSize}']
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt EKSNodeGroupRole.Arn
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]
      ScalingConfig:
        MinSize: 0
        DesiredSize: !Ref DesiredSpotInstances
        MaxSize: 300
      CapacityType: SPOT
      LaunchTemplate: {Id: !Ref NodeLaunchTemplate, Version: !GetAtt NodeLaunchTemplate.LatestVersionNumber}

  OnDemandNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      AmiType: AL2023_x86_64_STANDARD
      InstanceTypes: [!Sub 'i4i.${InstanceSize}']
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt EKSNodeGroupRole.Arn
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]
      ScalingConfig: {MinSize: 2, DesiredSize: 2, MaxSize: 2}
      CapacityType: ON_DEMAND
      LaunchTemplate: {Id: !Ref NodeLaunchTemplate, Version: !GetAtt NodeLaunchTemplate.LatestVersionNumber}

  EKSAddonCoreDNS:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: coredns
      ClusterName: !Ref EKSCluster

  EKSAddonKubeProxy:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: kube-proxy
      ClusterName: !Ref EKSCluster

  EKSAddonVPCCNI:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: vpc-cni
      ClusterName: !Ref EKSCluster

  DualStackNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internet-facing
      IpAddressType: dualstack
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]

  NLBHTTPTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: TCP
      VpcId: !Ref VPC
      TargetType: instance
      IpAddressType: ipv6

  NLBHTTPSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 443
      Protocol: TCP
      VpcId: !Ref VPC
      TargetType: instance
      IpAddressType: ipv6

  NLBHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NLBHTTPTargetGroup
      LoadBalancerArn: !Ref DualStackNLB
      Port: 80
      Protocol: TCP

  NLBHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NLBHTTPSTargetGroup
      LoadBalancerArn: !Ref DualStackNLB
      Port: 443
      Protocol: TCP

Outputs:
  EKSCluster: {Description: EKS Cluster, Value: !Ref EKSCluster}