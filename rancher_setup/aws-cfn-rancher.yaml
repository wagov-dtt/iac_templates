AWSTemplateFormatVersion: '2010-09-09'
Description: Rancher manager with RKE2 control plane and worker nodes, plus
  Network Load Balancer and aligned ports

Parameters:
  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/debian/release/bookworm/latest/amd64
  VpcCidrBlock:
    Type: String
    Default: 172.16.0.0/16
    Description: The CIDR block for the VPC (must be a /16 block)
  ControlPlaneInstanceCount:
    Type: Number
    Default: 3
    Description: Desired number of control plane instances
  WorkerInstanceCount:
    Type: Number
    Default: 1
    Description: Desired number of worker instances
  InstanceType:
    Type: String
    Default: r6a.xlarge
    Description: EC2 instance type for all nodes
  ControlPlaneRegister:
    Type: String
    Default: echo "copy from custom rke2 cluster in rancher manager"
    Description: Registration command for control plane nodes
  WorkerRegister:
    Type: String
    Default: echo "copy from custom rke2 cluster in rancher manager"
    Description: Registration command for worker nodes

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 0
        - !Cidr
          - !Ref VpcCidrBlock
          - 3
          - 12
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 1
        - !Cidr
          - !Ref VpcCidrBlock
          - 3
          - 12
      MapPublicIpOnLaunch: true
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 2
        - !GetAZs ''
      CidrBlock: !Select
        - 2
        - !Cidr
          - !Ref VpcCidrBlock
          - 3
          - 12
      MapPublicIpOnLaunch: true

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet3RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: RancherInstanceSecurityGroup
      GroupDescription: Security group for Rancher and RKE2 nodes
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      VpcId: !Ref VPC

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: RancherLBSecurityGroup
      GroupDescription: Security group for Rancher Load Balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  BaseLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref ImageId
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        MetadataOptions:
          HttpTokens: required
          HttpEndpoint: enabled
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 400
              VolumeType: gp3
              DeleteOnTermination: true
        UserData: !Base64
          Fn::Sub: |
            #!/bin/bash
            mkdir /tmp/ssm && cd /tmp/ssm
            wget https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb
            dpkg -i amazon-ssm-agent.deb && systemctl enable amazon-ssm-agent
            apt-get update && apt-get install -y git open-iscsi dnsutils

  RancherManagerInstance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref BaseLaunchTemplate
        Version: !GetAtt BaseLaunchTemplate.LatestVersionNumber
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Rancher-Manager

  ControlPlaneASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      DesiredCapacity: !Ref ControlPlaneInstanceCount
      MinSize: 3
      MaxSize: 30
      LaunchTemplate:
        LaunchTemplateId: !Ref BaseLaunchTemplate
        Version: !GetAtt BaseLaunchTemplate.LatestVersionNumber
      TargetGroupARNs:
        - !Ref ControlPlaneTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ControlPlane
          PropagateAtLaunch: true
        - Key: NodeType
          Value: ControlPlane
          PropagateAtLaunch: true

  WorkerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      DesiredCapacity: !Ref WorkerInstanceCount
      MinSize: 1
      MaxSize: 300
      LaunchTemplate:
        LaunchTemplateId: !Ref BaseLaunchTemplate
        Version: !GetAtt BaseLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Worker
          PropagateAtLaunch: true
        - Key: NodeType
          Value: Worker
          PropagateAtLaunch: true

  ControlPlaneSSMAssociation:
    Type: AWS::SSM::Association
    Properties:
      Name: AWS-RunShellScript
      AssociationName: !Sub ${AWS::StackName}-ControlPlane-Config
      Targets:
        - Key: tag:NodeType
          Values:
            - ControlPlane
      Parameters:
        commands:
          - echo "Running control plane specific configuration"
          - !Ref ControlPlaneRegister

  WorkerSSMAssociation:
    Type: AWS::SSM::Association
    Properties:
      Name: AWS-RunShellScript
      AssociationName: !Sub ${AWS::StackName}-Worker-Config
      Targets:
        - Key: tag:NodeType
          Values:
            - Worker
      Parameters:
        commands:
          - echo "Running worker node specific configuration"
          - !Ref WorkerRegister

  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3

  ControlPlaneTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-ControlPlane-TG
      Port: 80
      Protocol: TCP
      VpcId: !Ref VPC
      TargetType: instance
      HealthCheckProtocol: TCP
      HealthCheckPort: traffic-port

  ControlPlaneListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ControlPlaneTargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 80
      Protocol: TCP

  ControlPlaneListener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ControlPlaneTargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 443
      Protocol: TCP

  RancherManagerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-RancherManager-TG
      Port: 80
      Protocol: TCP
      VpcId: !Ref VPC
      TargetType: instance
      HealthCheckProtocol: TCP
      HealthCheckPort: traffic-port
      Targets:
        - Id: !Ref RancherManagerInstance

  RancherManagerListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref RancherManagerTargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 80
      Protocol: TCP

  RancherManagerListener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref RancherManagerTargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 443
      Protocol: TCP

Outputs:
  VPCId:
    Value: !Ref VPC
  RancherManagerInstanceId:
    Description: ID of the Rancher Manager EC2 instance
    Value: !Ref RancherManagerInstance
  ControlPlaneASGName:
    Description: Name of the Control Plane Auto Scaling Group
    Value: !Ref ControlPlaneASG
  WorkerASGName:
    Description: Name of the Worker Auto Scaling Group
    Value: !Ref WorkerASG
  NetworkLoadBalancerDNS:
    Description: DNS name of the Network Load Balancer
    Value: !GetAtt NetworkLoadBalancer.DNSName
  RancherManagerEndpoint:
    Description: Rancher Manager endpoint
    Value: !Sub https://${NetworkLoadBalancer.DNSName}

Conditions:
  UseCustomFQDN: !Not
    - !Equals
      - !Ref FQDN
      - sslip.io